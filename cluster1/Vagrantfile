POD_NW_CIDR = "10.244.0.0/16"
KUBETOKEN = "b029ee.968a33e8d8e6bb0d"
MASTER_IP = "192.168.200.11"
WORKER1_IP = "192.168.200.21"
WORKER2_IP = "192.168.200.22"

Vagrant.configure("2") do |config|
    config.vm.box = "ubuntu/bionic64"
    config.vm.box_check_update = false


    # setup master node
    config.vm.define "master1" do |node|

        node.vm.provider "virtualbox" do |vb|
            vb.name = "k8s-cluster1-master-1"
            vb.memory = 1024
            vb.cpus = 2

           vb.customize [
                "modifyvm", :id, "--uartmode1", "file",
                File.join(Dir.pwd, "tmp/k8s-cluster1-master-1.log")
            ]
        end

        node.vm.hostname = "master1"
        node.vm.network :private_network, ip: MASTER_IP

        node.vm.provision "setup-hosts", :type => "shell", :path => "scripts/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        #node.vm.provision 'shell', inline: "cat /vagrant/certs/terminal_id_rsa.pub >> /root/.ssh/authorized_keys"
        node.vm.provision "install-certs", type: "shell", :path => "scripts/install-certs.sh"
        node.vm.provision "setup-dns", type: "shell", :path => "scripts/update-dns.sh"
        node.vm.provision "install-kube", type: "shell", :path => "scripts/install-kube.sh"
        node.vm.provision "install-master", type: "shell", :path => "scripts/install-master.sh", env: {"MASTER_IP" => "#{MASTER_IP}", "POD_NW_CIDR" => "#{POD_NW_CIDR}", "KUBETOKEN" => "#{KUBETOKEN}"}

    end


    # setup worker 1
    config.vm.define "worker1" do |node|

        node.vm.provider "virtualbox" do |vb|
            vb.name = "k8s-cluster1-worker-1"
            vb.memory = 512
            vb.cpus = 1

            vb.customize [
                "modifyvm", :id, "--uartmode1", "file",
                File.join(Dir.pwd, "tmp/k8s-cluster1-worker-1.log")
            ]
        end

        node.vm.hostname = "worker1"
        node.vm.network :private_network, ip: WORKER1_IP

        node.vm.provision "setup-hosts", :type => "shell", :path => "scripts/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        #node.vm.provision 'shell', inline: "cat /vagrant/certs/terminal_id_rsa.pub >> /root/.ssh/authorized_keys"
        node.vm.provision "install-certs", type: "shell", :path => "scripts/install-certs.sh"
        node.vm.provision "setup-dns", type: "shell", :path => "scripts/update-dns.sh"
        node.vm.provision "install-kube", type: "shell", :path => "scripts/install-kube.sh"
        node.vm.provision "allow-bridge-nf-traffic", :type => "shell", :path => "scripts/allow-bridge-nf-traffic.sh"
        node.vm.provision "install-worker", type: "shell", :path => "scripts/install-worker.sh", env: {"MASTER_IP" => "#{MASTER_IP}", "KUBETOKEN" => "#{KUBETOKEN}"}

    end

    # setup worker 2, but not completely
    config.vm.define "worker2" do |node|

        node.vm.provider "virtualbox" do |vb|
            vb.name = "k8s-cluster1-worker-2"
            vb.memory = 512
            vb.cpus = 1

            vb.customize [
                "modifyvm", :id, "--uartmode1", "file",
                File.join(Dir.pwd, "tmp/k8s-cluster1-worker-2.log")
            ]
        end

        node.vm.hostname = "worker2"
        node.vm.network :private_network, ip: WORKER2_IP

        node.vm.provision "setup-hosts", :type => "shell", :path => "scripts/setup-hosts.sh" do |s|
          s.args = ["enp0s8"]
        end

        #node.vm.provision 'shell', inline: "cat /vagrant/certs/terminal_id_rsa.pub >> /root/.ssh/authorized_keys"
        node.vm.provision "install-certs", type: "shell", :path => "scripts/install-certs.sh"
        node.vm.provision "setup-dns", type: "shell", :path => "scripts/update-dns.sh"
        node.vm.provision "install-kube", type: "shell", :path => "scripts/install-kube.sh"
        node.vm.provision "allow-bridge-nf-traffic", :type => "shell", :path => "scripts/allow-bridge-nf-traffic.sh"
        #node.vm.provision "install-worker", type: "shell", :path => "scripts/install-worker.sh", env: {"MASTER_IP" => "#{MASTER_IP}", "KUBETOKEN" => "#{KUBETOKEN}"}

    end

end